{"version":3,"sources":["components/Header.module.sass","components/ControlButton.module.sass","components/ContractSession.module.sass","utils/web3.js","utils/contract.js","components/Header.js","utils/constants.js","components/Section.js","components/ControlButton.js","components/UserSection.js","components/TransactionStatus.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","initWeb3","a","window","ethereum","autoRefreshOnNetworkChange","web3","Web3","console","log","version","enable","error","currentProvider","contractArtifact","eth","net","getId","networkId","deployedNetwork","networks","warn","Object","keys","debug","contract","Contract","abi","address","err","getContract","HeaderItem","props","className","styles","header_item","children","Header","header","CHAIN_IDS","Section","ControlButton","disabled","button","onClick","Item","SubItem","Title","SectionWrapper","id","UserSection","account","isOwner","isFaucetOn","tokenBalance","faucetBalance","onSendToFaucetClick","onGetTokenClick","onFaucetOnOffClick","style","color","TransactionStatus","messageColor","messageType","message","getAccounts","accounts","checkIsOwner","token","setIsOwner","methods","owner","call","ownerAddress","isTokenOwner","toLowerCase","setupWeb3","setAccount","setNetwork","web3Provider","on","netId","initDapp","setWeb3","resetToken","setToken","setFaucet","setTokenDetails","setIsFaucetOn","tokenArtifact","faucetArtifact","faucet","updateTokenInfo","turnedOn","isOn","setEventListeners","setBalances","events","Transfer","filter","to","event","updateBalances","from","name","symbol","decimals","toBN","totalSupply","toString","balanceOf","accountBalance","options","NO_NETWORK","App","useState","network","tokenDetails","balances","type","transactionStatus","setTransactionStatus","useEffect","handleGetTokenClick","preventDefault","withdraw","send","handleTransactionResult","handleSendToFaucetClick","transfer","txHash","slice","handleFaucetOnOffClick","turnOff","turnOn","supply","parseInt","section_contract","title_outlined","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3ccf5e93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2gbKz\",\"header_item\":\"Header_header_item__1bJIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ControlButton_button__wuqQ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"ContractSession_section__16P3h\",\"section_contract\":\"ContractSession_section_contract__1_7Ix\",\"section_contract_desc\":\"ContractSession_section_contract_desc__2q7J9\",\"section_contract_info\":\"ContractSession_section_contract_info__dF3_o\",\"title_outlined\":\"ContractSession_title_outlined__2kBHl\"};","import Web3 from \"web3\";\n\nconst initWeb3 = async () => {\n  let web3;\n\n  if (window.ethereum) {\n    // soon to be deprecated / removed, as reloading is bad\n    // see https://medium.com/metamask/no-longer-reloading-pages-on-network-change-fbf041942b44\n    window.ethereum.autoRefreshOnNetworkChange = false;\n\n    // modern Dapp browser or using Metamask\n    web3 = new Web3(window.ethereum);\n    console.log(\"Web3 version\", web3.version);\n    try {\n      // get permission to access accounts\n      await window.ethereum.enable();\n    } catch (err) {\n      console.error(\"User denied account access.\");\n    }\n  } else if (window.web3) {\n    // legacy-style\n    web3 = new Web3(window.web3.currentProvider);\n    console.log(\"Web3 version\", web3.version);\n  } else {\n    console.error(\"No compatible web3 provider injected\");\n  }\n\n  return web3;\n};\n\nexport default initWeb3;\n","async function getContract(contractArtifact, web3) {\n  // determine network to connect to\n  let networkId = await web3.eth.net.getId();\n  let deployedNetwork = contractArtifact.networks[networkId];\n  if (!deployedNetwork) {\n    console.warn(\n      \"web3 provider is connected to a network ID that does not matched the deployed network ID\"\n    );\n    console.warn(\n      \"Pls make sure that you are connected to the right network, defaulting to deployed network ID\"\n    );\n    networkId = Object.keys(contractArtifact.networks)[0];\n    deployedNetwork = contractArtifact.networks[networkId];\n  }\n  console.debug(\"deployedNetwork\", deployedNetwork);\n\n  // initialise the contract\n  let contract;\n  try {\n    contract = new web3.eth.Contract(\n      contractArtifact.abi,\n      deployedNetwork.address\n    );\n  } catch (err) {\n    console.error(\"Failed to retrieve deployed contract.\");\n    console.debug(err);\n  }\n\n  return contract;\n}\n\nexport default getContract;\n","import React from \"react\";\nimport styles from \"./Header.module.sass\";\n\nconst HeaderItem = props => {\n  return <div className={styles.header_item}>{props.children}</div>;\n};\n\nconst Header = props => {\n  return <header className={styles.header}>{props.children}</header>;\n};\n\nexport { Header, HeaderItem };\n","const CHAIN_IDS = {\n  \"1\": \"Mainnet\",\n  \"2\": \"Morden (disused), Expanse mainnet\",\n  \"3\": \"Ropsten\",\n  \"4\": \"Rinkeby\",\n  \"5\": \"Goerli\",\n  \"42\": \"Kovan\",\n  \"1337\": \"Geth private chains (default)\",\n};\n\nexport { CHAIN_IDS };\n","import React from \"react\";\nimport \"./Section.sass\";\n\nconst Section = (props) => {\n  let className = \"section \";\n  className += props.className;\n  return <div className={className}>{props.children}</div>;\n};\n\nexport default Section;\n","import React from \"react\";\nimport styles from \"./ControlButton.module.sass\";\n\nconst ControlButton = (props) => {\n  if (!props.disabled)\n    return (\n      <button className={styles.button} onClick={props.onClick}>\n        {props.children}\n      </button>\n    );\n  else\n    return (\n      <button disabled className={styles.button}>\n        {props.children}\n      </button>\n    );\n};\n\nexport default ControlButton;\n","import React from \"react\";\nimport Section from \"./Section\";\nimport \"./UserSection.sass\";\nimport ControlButton from \"./ControlButton\";\n\nconst Item = (props) => {\n  return <div className=\"section--user-item\">{props.children}</div>;\n};\n\nconst SubItem = (props) => {\n  return <div className=\"section--user-subitem\">{props.children}</div>;\n};\n\nconst Title = (props) => {\n  return <div className=\"section--user-title\">{props.children}</div>;\n};\n\nconst SectionWrapper = ({ children }) => {\n  return (\n    <Section id=\"user\" className=\"section--user\">\n      {children}\n    </Section>\n  );\n};\n\nconst UserSection = ({\n  account,\n  isOwner,\n  isFaucetOn,\n  tokenBalance,\n  faucetBalance,\n  onSendToFaucetClick,\n  onGetTokenClick,\n  onFaucetOnOffClick,\n  children,\n}) => {\n  if (!account) {\n    return (\n      <SectionWrapper>\n        <h3 style={{ color: \"red\" }}>Please install MetaMask. </h3>\n        {children}\n      </SectionWrapper>\n    );\n  }\n\n  if (isOwner) {\n    return (\n      <SectionWrapper>\n        <Title>\n          <h2>Controls</h2>\n        </Title>\n        <Item>\n          <SubItem>Account balance: </SubItem>\n          <SubItem>{tokenBalance} PLT</SubItem>\n        </Item>\n        <Item>\n          <SubItem>Faucet balance: </SubItem>\n          <SubItem>{faucetBalance} PLT</SubItem>\n        </Item>\n        <ControlButton onClick={onSendToFaucetClick}>\n          Send to faucet\n        </ControlButton>\n        <ControlButton onClick={onFaucetOnOffClick}>\n          Turn faucet {isFaucetOn ? \"off\" : \"on\"}\n        </ControlButton>\n        {children}\n      </SectionWrapper>\n    );\n  } else {\n    return (\n      <SectionWrapper>\n        <Title>\n          <h2>Your account</h2>\n        </Title>\n        <Item>\n          <SubItem>Token balance:</SubItem>\n          <SubItem>{tokenBalance} PLT</SubItem>\n        </Item>\n        <Item>\n          <ControlButton onClick={onGetTokenClick}>Send me PLT!</ControlButton>\n        </Item>\n        {children}\n      </SectionWrapper>\n    );\n  }\n};\n\nexport default UserSection;\n","import React from \"react\";\nimport \"./TransactionStatus.sass\";\n\nconst TransactionStatus = props => {\n  let messageColor;\n  if (props.messageType === \"success\") messageColor = \"green\";\n  else if (props.messageType === \"fail\") messageColor = \"red\";\n  else messageColor = \"yellow\";\n\n  return (\n    <div className=\"transaction-status\" style={{ color: messageColor }}>\n      <h3>{props.message}</h3>\n    </div>\n  );\n};\n\nexport default TransactionStatus;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.sass\";\nimport initWeb3 from \"../utils/web3\";\nimport { toBN } from \"web3-utils\";\nimport getContract from \"../utils/contract\";\nimport { Header, HeaderItem } from \"./Header\";\nimport { CHAIN_IDS } from \"../utils/constants\";\nimport tokenArtifact from \"../contracts/PlainToken\";\nimport faucetArtifact from \"../contracts/Faucet\";\nimport UserSection from \"./UserSection\";\nimport TransactionStatus from \"./TransactionStatus\";\n\nimport Section from \"./Section\";\nimport styles from \"./ContractSession.module.sass\";\n\nconst getAccounts = async (web3) => {\n  const accounts = await web3.eth.getAccounts();\n  console.log(\"accounts[0]: \", accounts[0]);\n\n  return accounts;\n};\n\nconst checkIsOwner = async (token, account, setIsOwner) => {\n  const ownerAddress = await token.methods.owner().call();\n  const isTokenOwner = ownerAddress.toLowerCase() === account.toLowerCase();\n  console.debug(\"is token owner: \", isTokenOwner);\n  setIsOwner(isTokenOwner);\n};\n\nconst setupWeb3 = async (setAccount, setNetwork) => {\n  const web3 = await initWeb3();\n\n  if (web3) {\n    // add listeners for account and network changes\n    const web3Provider = web3.currentProvider;\n    web3Provider.on(\"accountsChanged\", async (accounts) => {\n      console.log(\"Account(s) updated.\");\n      console.log(\"accounts[0]: \", accounts[0]);\n      setAccount(accounts[0]);\n    });\n\n    web3Provider.on(\"networkChanged\", async (netId) => {\n      console.log(\"Network changed.\");\n      console.log(\"Net ID: \", netId);\n      const chain_id = CHAIN_IDS[netId] || netId;\n      setNetwork(chain_id);\n    });\n\n    return web3;\n  }\n};\n\nconst initDapp = async (setWeb3, setAccount, setNetwork) => {\n  const web3 = await setupWeb3(setAccount, setNetwork);\n  if (!web3) {\n    console.debug(\"Web3 could not be initialized.\");\n    return;\n  }\n  setWeb3(web3);\n\n  const accounts = await getAccounts(web3);\n  setAccount(accounts[0]);\n\n  const netId = await web3.eth.net.getId();\n  console.log(\"Net ID: \", netId);\n  const chain_id = CHAIN_IDS[netId] || netId;\n  setNetwork(chain_id);\n\n  console.log(\"Dapp initialised\");\n};\n\nconst resetToken = async (\n  web3,\n  account,\n  setToken,\n  setFaucet,\n  setTokenDetails,\n  setIsOwner,\n  setIsFaucetOn\n) => {\n  if (!web3) return;\n\n  const token = await getContract(tokenArtifact, web3);\n  const faucet = await getContract(faucetArtifact, web3);\n  setToken(token);\n  setFaucet(faucet);\n\n  await updateTokenInfo(token, setTokenDetails);\n\n  await checkIsOwner(token, account, setIsOwner);\n\n  const isOn = await faucet.methods.turnedOn().call();\n  setIsFaucetOn(isOn);\n  console.debug(\"Faucet status:\", isOn);\n};\n\nconst setEventListeners = async (account, token, faucet, setBalances) => {\n  if (!token) return;\n\n  console.debug(\"Setting event listeners...\");\n\n  token.events\n    .Transfer({\n      filter: { to: account },\n    })\n    .on(\"data\", async function(event) {\n      console.debug(\"Transfer to account:\", account);\n      await updateBalances(account, token, faucet, setBalances);\n    })\n    .on(\"error\", console.error);\n\n  token.events\n    .Transfer({\n      filter: { from: account },\n    })\n    .on(\"data\", async function(event) {\n      console.debug(\"Transfer from account:\", account);\n      await updateBalances(account, token, faucet, setBalances);\n    })\n    .on(\"error\", console.error);\n\n  await updateBalances(account, token, faucet, setBalances);\n};\n\nconst updateTokenInfo = async (token, setTokenDetails) => {\n  const name = await token.methods.name().call();\n  const symbol = await token.methods.symbol().call();\n  const decimals = await token.methods.decimals().call();\n\n  const totalSupply = toBN(await token.methods.totalSupply().call()).toString();\n\n  setTokenDetails({ name, symbol, decimals, totalSupply });\n};\n\nconst updateBalances = async (account, token, faucet, setBalances) => {\n  if (!token || !faucet) return;\n\n  let accountBalance;\n  try {\n    accountBalance = await token.methods.balanceOf(account).call();\n  } catch (err) {\n    console.log(\"Could not retrieve account balance\");\n    console.debug(err);\n    accountBalance = 0;\n  }\n  accountBalance = toBN(accountBalance).toString();\n\n  let faucetBalance;\n  try {\n    faucetBalance = await token.methods\n      .balanceOf(faucet.options.address)\n      .call();\n  } catch (err) {\n    console.log(\"Could not retrieve faucet balance\");\n    console.debug(err);\n    faucetBalance = 0;\n  }\n  faucetBalance = toBN(faucetBalance).toString();\n\n  setBalances({ account: accountBalance, faucet: faucetBalance });\n  console.debug(`updated token balance: ${accountBalance} `);\n  console.debug(`updated faucet balance: ${faucetBalance} `);\n};\n\nconst NO_ADDRESS = \"No address - check MetaMask\";\nconst NO_NETWORK = \"No network - check MetaMask\";\n\nconst App = () => {\n  const [account, setAccount] = useState(NO_ADDRESS);\n  const [network, setNetwork] = useState(NO_NETWORK);\n  const [web3, setWeb3] = useState(null);\n  const [token, setToken] = useState(null);\n  const [faucet, setFaucet] = useState(null);\n  const [isFaucetOn, setIsFaucetOn] = useState(false);\n  const [tokenDetails, setTokenDetails] = useState({\n    name: \"\",\n    symbol: \"\",\n    decimals: \"\",\n    totalSupply: \"\",\n  });\n  const [balances, setBalances] = useState({\n    account: \"0\",\n    faucet: \"0\",\n  });\n  const [transactionStatus, setTransactionStatus] = useState({\n    message: \"\",\n    type: \"\",\n  });\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    if (account === NO_ADDRESS && network === NO_NETWORK)\n      initDapp(setWeb3, setAccount, setNetwork);\n  }, [account, network]);\n\n  useEffect(() => {\n    if (account === NO_NETWORK || network === NO_NETWORK || !web3) return;\n    resetToken(\n      web3,\n      account,\n      setToken,\n      setFaucet,\n      setTokenDetails,\n      setIsOwner,\n      setIsFaucetOn\n    );\n  }, [web3, account, network]);\n\n  useEffect(() => {\n    if (account === NO_NETWORK || !token || !faucet) return;\n    setEventListeners(account, token, faucet, setBalances);\n  }, [account, token, faucet]);\n\n  const handleGetTokenClick = async (event) => {\n    event.preventDefault();\n\n    setTransactionStatus({\n      message: \"Waiting on transaction status...\",\n      type: \"wait\",\n    });\n\n    await faucet.methods\n      .withdraw(100)\n      .send({ from: account }, handleTransactionResult);\n  };\n\n  const handleSendToFaucetClick = async (event) => {\n    event.preventDefault();\n\n    setTransactionStatus({\n      message: \"Waiting on transaction status...\",\n      type: \"wait\",\n    });\n\n    console.debug(\"faucet address: \", faucet.options.address);\n    await token.methods\n      .transfer(faucet.options.address, 1000)\n      .send({ from: account }, handleTransactionResult);\n  };\n\n  const handleTransactionResult = (err, txHash) => {\n    if (err) {\n      console.debug(err);\n      console.log(err.message.slice(0, 42));\n      setTransactionStatus({\n        message: \"Transaction failed.\",\n        type: \"fail\",\n      });\n    } else {\n      console.debug(\"Transaction successful, txHash: \", txHash);\n      setTransactionStatus({\n        message: \"Transaction succeeded.\",\n        type: \"success\",\n      });\n    }\n  };\n  const handleFaucetOnOffClick = async (event) => {\n    event.preventDefault();\n\n    setTransactionStatus({\n      message: \"Waiting on transaction status...\",\n      type: \"wait\",\n    });\n\n    console.debug(\"Setting faucet status to:\", !isFaucetOn);\n    setIsFaucetOn(!isFaucetOn);\n\n    if (isFaucetOn)\n      await faucet.methods\n        .turnOff()\n        .send({ from: account }, handleTransactionResult);\n    else\n      await faucet.methods\n        .turnOn()\n        .send({ from: account }, handleTransactionResult);\n  };\n\n  const { totalSupply, decimals, name, symbol } = tokenDetails;\n  console.debug(\"Total supply:\", totalSupply);\n  console.debug(\"decimals:\", decimals);\n  const supply = parseInt(totalSupply) / 10 ** parseInt(decimals);\n\n  return (\n    <div className=\"container\">\n      <Header>\n        <HeaderItem>Account: {account}</HeaderItem>\n        <HeaderItem>Network: {network}</HeaderItem>\n      </Header>\n      <Section className={styles.section_contract}>\n        <h2 className={styles.title_outlined}>\n          <center>\n            {name} ({symbol})\n          </center>\n        </h2>\n        <p>\n          Total supply: {supply} {symbol}\n        </p>\n        <UserSection\n          account={account}\n          isOwner={isOwner}\n          isFaucetOn={isFaucetOn}\n          onFaucetOnOffClick={handleFaucetOnOffClick}\n          tokenBalance={balances.account}\n          faucetBalance={balances.faucet}\n          onSendToFaucetClick={handleSendToFaucetClick}\n          onGetTokenClick={handleGetTokenClick}\n        ></UserSection>\n        <TransactionStatus\n          message={transactionStatus.message}\n          messageType={transactionStatus.type}\n        />\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}