{"version":3,"sources":["components/ControlButton.module.sass","../../node_modules/web3-eth-accounts/src sync","utils/web3.js","utils/contract.js","components/Header.js","utils/constants.js","components/Section.js","components/ControlButton.js","components/UserSection.js","components/TransactionStatus.js","components/App.js","serviceWorker.js","index.js","components/Header.module.sass","components/ContractSession.module.sass"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","initWeb3","a","window","ethereum","web3","Web3","console","log","version","enable","error","autoRefreshOnNetworkChange","currentProvider","contractArtifact","eth","net","getId","networkId","deployedNetwork","networks","warn","Object","debug","contract","Contract","abi","address","err","getContract","HeaderItem","props","className","styles","header_item","children","Header","header","CHAIN_IDS","Section","ControlButton","button","onClick","Item","SubItem","Title","UserSection","account","isOwner","tokenBalance","faucetBalance","onSendToFaucetClick","onGetTokenClick","SectionFragment","style","color","TransactionStatus","messageColor","messageType","message","getAccounts","accounts","checkIsOwner","token","setIsOwner","methods","owner","call","ownerAddress","isTokenOwner","toLowerCase","setupWeb3","setAccount","setNetwork","web3Provider","on","netId","initDapp","setWeb3","resetToken","setToken","setFaucet","setTokenDetails","tokenArtifact","faucetArtifact","faucet","updateTokenInfo","setEventListeners","setBalances","events","Transfer","filter","to","event","updateBalances","from","name","symbol","decimals","toBN","totalSupply","toString","balanceOf","accountBalance","options","NO_NETWORK","App","useState","network","tokenDetails","balances","type","transactionStatus","setTransactionStatus","useEffect","handleGetTokenClick","preventDefault","withdraw","send","handleTransactionResult","handleSendToFaucetClick","transfer","txHash","supply","parseInt","section_contract","title_outlined","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.348489ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ControlButton_button__wuqQ1\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 458;","import Web3 from \"web3\";\n\nconst initWeb3 = async () => {\n  let web3;\n\n  if (window.ethereum) {\n    // modern Dapp browser or using Metamask\n    web3 = new Web3(window.ethereum);\n    console.log(\"Web3 version\", web3.version);\n    try {\n      // get permission to access accounts\n      await window.ethereum.enable();\n    } catch (err) {\n      console.error(\"User denied account access.\");\n    }\n\n    // soon to be deprecated / removed, as reloading is bad\n    // see https://medium.com/metamask/no-longer-reloading-pages-on-network-change-fbf041942b44\n    window.ethereum.autoRefreshOnNetworkChange = false;\n  } else if (window.web3) {\n    // legacy-style\n    web3 = new Web3(window.web3.currentProvider);\n    console.log(\"Web3 version\", web3.version);\n  } else {\n    console.error(\"No compatible web3 provider injected\");\n  }\n\n  return web3;\n};\n\nexport default initWeb3;\n","async function getContract(contractArtifact, web3) {\n  // determine network to connect to\n  let networkId = await web3.eth.net.getId();\n  let deployedNetwork = contractArtifact.networks[networkId];\n  if (!deployedNetwork) {\n    console.warn(\n      \"web3 provider is connected to a network ID that does not matched the deployed network ID\"\n    );\n    console.warn(\n      \"Pls make sure that you are connected to the right network, defaulting to deployed network ID\"\n    );\n    networkId = Object.keys(contractArtifact.networks)[0];\n    deployedNetwork = contractArtifact.networks[networkId];\n  }\n  console.debug(\"deployedNetwork\", deployedNetwork);\n\n  // initialise the contract\n  let contract;\n  try {\n    contract = new web3.eth.Contract(\n      contractArtifact.abi,\n      deployedNetwork.address\n    );\n  } catch (err) {\n    console.error(\"Failed to retrieve deployed contract.\");\n    console.debug(err);\n  }\n\n  return contract;\n}\n\nexport default getContract;\n","import React from \"react\";\nimport styles from \"./Header.module.sass\";\n\nconst HeaderItem = props => {\n  return <div className={styles.header_item}>{props.children}</div>;\n};\n\nconst Header = props => {\n  return <header className={styles.header}>{props.children}</header>;\n};\n\nexport { Header, HeaderItem };\n","const CHAIN_IDS = {\n  \"1\": \"Mainnet\",\n  \"2\": \"Morden (disused), Expanse mainnet\",\n  \"3\": \"Ropsten\",\n  \"4\": \"Rinkeby\",\n  \"5\": \"Goerli\",\n  \"42\": \"Kovan\",\n  \"1337\": \"Geth private chains (default)\",\n};\n\nexport { CHAIN_IDS };\n","import React from \"react\";\nimport \"./Section.sass\";\n\nconst Section = (props) => {\n  let className = \"section \";\n  className += props.className;\n  return <div className={className}>{props.children}</div>;\n};\n\nexport default Section;\n","import React from \"react\";\nimport styles from \"./ControlButton.module.sass\";\n\nconst ControlButton = props => {\n  return (\n    <button className={styles.button} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default ControlButton;\n","import React from \"react\";\nimport Section from \"./Section\";\nimport \"./UserSection.sass\";\nimport ControlButton from \"./ControlButton\";\n\nconst Item = (props) => {\n  return <div className=\"section--user-item\">{props.children}</div>;\n};\n\nconst SubItem = (props) => {\n  return <div className=\"section--user-subitem\">{props.children}</div>;\n};\n\nconst Title = (props) => {\n  return <div className=\"section--user-title\">{props.children}</div>;\n};\n\nconst UserSection = ({\n  account,\n  isOwner,\n  tokenBalance,\n  faucetBalance,\n  onSendToFaucetClick,\n  onGetTokenClick,\n  children,\n}) => {\n  const SectionFragment = ({ children }) => {\n    return (\n      <Section id=\"user\" className=\"section--user\">\n        {children}\n      </Section>\n    );\n  };\n\n  let instance;\n\n  if (!account) {\n    instance = (\n      <SectionFragment>\n        <h3 style={{ color: \"red\" }}>Please install MetaMask. </h3>\n        {children}\n      </SectionFragment>\n    );\n  } else {\n    if (isOwner) {\n      instance = (\n        <SectionFragment>\n          <Title>\n            <h2>Controls</h2>\n          </Title>\n          <Item>\n            <SubItem>Account balance: </SubItem>\n            <SubItem>{tokenBalance} PLT</SubItem>\n          </Item>\n          <Item>\n            <SubItem>Faucet balance: </SubItem>\n            <SubItem>{faucetBalance} PLT</SubItem>\n          </Item>\n          <ControlButton onClick={onSendToFaucetClick}>\n            Send to faucet\n          </ControlButton>\n          {children}\n        </SectionFragment>\n      );\n    } else {\n      instance = (\n        <SectionFragment>\n          <Title>\n            <h2>Your account</h2>\n          </Title>\n          <Item>\n            <SubItem>Token balance:</SubItem>\n            <SubItem>{tokenBalance} PLT</SubItem>\n          </Item>\n          <Item>\n            <ControlButton onClick={onGetTokenClick}>\n              Send me PLT!\n            </ControlButton>\n          </Item>\n          {children}\n        </SectionFragment>\n      );\n    }\n  }\n  return instance;\n};\n\nexport default UserSection;\n","import React from \"react\";\nimport \"./TransactionStatus.sass\";\n\nconst TransactionStatus = props => {\n  let messageColor;\n  if (props.messageType === \"success\") messageColor = \"green\";\n  else if (props.messageType === \"fail\") messageColor = \"red\";\n  else messageColor = \"yellow\";\n\n  return (\n    <div className=\"transaction-status\" style={{ color: messageColor }}>\n      <h3>{props.message}</h3>\n    </div>\n  );\n};\n\nexport default TransactionStatus;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.sass\";\nimport initWeb3 from \"../utils/web3\";\nimport { toBN } from \"web3-utils\";\nimport getContract from \"../utils/contract\";\nimport { Header, HeaderItem } from \"./Header\";\nimport { CHAIN_IDS } from \"../utils/constants\";\nimport tokenArtifact from \"../contracts/PlainToken\";\nimport faucetArtifact from \"../contracts/Faucet\";\nimport UserSection from \"./UserSection\";\nimport TransactionStatus from \"./TransactionStatus\";\n\nimport Section from \"./Section\";\nimport styles from \"./ContractSession.module.sass\";\n\nconst getAccounts = async (web3) => {\n  const accounts = await web3.eth.getAccounts();\n  console.log(\"accounts[0]: \", accounts[0]);\n\n  return accounts;\n};\n\nconst checkIsOwner = async (token, account, setIsOwner) => {\n  const ownerAddress = await token.methods.owner().call();\n  const isTokenOwner = ownerAddress.toLowerCase() === account.toLowerCase();\n  console.debug(\"is token owner: \", isTokenOwner);\n  setIsOwner(isTokenOwner);\n};\n\nconst setupWeb3 = async (setAccount, setNetwork) => {\n  const web3 = await initWeb3();\n\n  if (web3) {\n    // add listeners for account and network changes\n    const web3Provider = web3.currentProvider;\n    web3Provider.on(\"accountsChanged\", async (accounts) => {\n      console.log(\"Account(s) updated.\");\n      console.log(\"accounts[0]: \", accounts[0]);\n      setAccount(accounts[0]);\n    });\n\n    web3Provider.on(\"networkChanged\", async (netId) => {\n      console.log(\"Network changed.\");\n      console.log(\"Net ID: \", netId);\n      const chain_id = CHAIN_IDS[netId] || netId;\n      setNetwork(chain_id);\n    });\n\n    return web3;\n  }\n};\n\nconst initDapp = async (setWeb3, setAccount, setNetwork) => {\n  const web3 = await setupWeb3(setAccount, setNetwork);\n  if (!web3) {\n    console.debug(\"Web3 could not be initialized.\");\n    return;\n  }\n  setWeb3(web3);\n\n  const accounts = await getAccounts(web3);\n  setAccount(accounts[0]);\n\n  const netId = await web3.eth.net.getId();\n  console.log(\"Net ID: \", netId);\n  const chain_id = CHAIN_IDS[netId] || netId;\n  setNetwork(chain_id);\n\n  console.log(\"Dapp initialised\");\n};\n\nconst resetToken = async (\n  web3,\n  account,\n  setToken,\n  setFaucet,\n  setTokenDetails,\n  setIsOwner\n) => {\n  if (!web3) return;\n\n  const token = await getContract(tokenArtifact, web3);\n  const faucet = await getContract(faucetArtifact, web3);\n  setToken(token);\n  setFaucet(faucet);\n\n  await updateTokenInfo(token, setTokenDetails);\n\n  await checkIsOwner(token, account, setIsOwner);\n};\n\nconst setEventListeners = async (account, token, faucet, setBalances) => {\n  if (!token) return;\n\n  console.debug(\"Setting event listeners...\");\n\n  token.events\n    .Transfer({\n      filter: { to: account },\n    })\n    .on(\"data\", async function(event) {\n      console.debug(\"Transfer to account:\", account);\n      await updateBalances(account, token, faucet, setBalances);\n    })\n    .on(\"error\", console.error);\n\n  token.events\n    .Transfer({\n      filter: { from: account },\n    })\n    .on(\"data\", async function(event) {\n      console.debug(\"Transfer from account:\", account);\n      await updateBalances(account, token, faucet, setBalances);\n    })\n    .on(\"error\", console.error);\n\n  await updateBalances(account, token, faucet, setBalances);\n};\n\nconst updateTokenInfo = async (token, setTokenDetails) => {\n  const name = await token.methods.name().call();\n  const symbol = await token.methods.symbol().call();\n  const decimals = await token.methods.decimals().call();\n\n  const totalSupply = toBN(await token.methods.totalSupply().call()).toString();\n\n  setTokenDetails({ name, symbol, decimals, totalSupply });\n};\n\nconst updateBalances = async (account, token, faucet, setBalances) => {\n  if (!token || !faucet) return;\n\n  let accountBalance;\n  try {\n    accountBalance = await token.methods.balanceOf(account).call();\n  } catch (err) {\n    console.log(\"Could not retrieve account balance\");\n    console.debug(err);\n    accountBalance = 0;\n  }\n  accountBalance = toBN(accountBalance).toString();\n\n  let faucetBalance;\n  try {\n    faucetBalance = await token.methods\n      .balanceOf(faucet.options.address)\n      .call();\n  } catch (err) {\n    console.log(\"Could not retrieve faucet balance\");\n    console.debug(err);\n    faucetBalance = 0;\n  }\n  faucetBalance = toBN(faucetBalance).toString();\n\n  setBalances({ account: accountBalance, faucet: faucetBalance });\n  console.debug(`updated token balance: ${accountBalance} `);\n  console.debug(`updated faucet balance: ${faucetBalance} `);\n};\n\nconst NO_ADDRESS = \"No address - check MetaMask\";\nconst NO_NETWORK = \"No network - check MetaMask\";\n\nconst App = () => {\n  const [account, setAccount] = useState(NO_ADDRESS);\n  const [network, setNetwork] = useState(NO_NETWORK);\n  const [web3, setWeb3] = useState(null);\n  const [token, setToken] = useState(null);\n  const [faucet, setFaucet] = useState(null);\n  const [tokenDetails, setTokenDetails] = useState({\n    name: \"\",\n    symbol: \"\",\n    decimals: \"\",\n    totalSupply: \"\",\n  });\n  const [balances, setBalances] = useState({\n    account: \"0\",\n    faucet: \"0\",\n  });\n  const [transactionStatus, setTransactionStatus] = useState({\n    message: \"\",\n    type: \"\",\n  });\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    if (account === NO_ADDRESS && network === NO_NETWORK)\n      initDapp(setWeb3, setAccount, setNetwork);\n  }, [account, network]);\n\n  useEffect(() => {\n    if (account === NO_NETWORK || network === NO_NETWORK || !web3) return;\n    resetToken(web3, account, setToken, setFaucet, setTokenDetails, setIsOwner);\n  }, [web3, account, network]);\n\n  useEffect(() => {\n    if (account === NO_NETWORK || !token || !faucet) return;\n    setEventListeners(account, token, faucet, setBalances);\n  }, [account, token, faucet]);\n\n  const handleGetTokenClick = async (event) => {\n    event.preventDefault();\n\n    setTransactionStatus({\n      message: \"Waiting on transaction status...\",\n      type: \"wait\",\n    });\n\n    await faucet.methods\n      .withdraw(100)\n      .send({ from: account }, handleTransactionResult);\n  };\n\n  const handleSendToFaucetClick = async (event) => {\n    event.preventDefault();\n\n    setTransactionStatus({\n      message: \"Waiting on transaction status...\",\n      type: \"wait\",\n    });\n\n    console.debug(\"faucet address: \", faucet.options.address);\n    await token.methods\n      .transfer(faucet.options.address, 1000)\n      .send({ from: account }, handleTransactionResult);\n  };\n\n  const handleTransactionResult = (err, txHash) => {\n    if (err) {\n      console.log(err);\n      setTransactionStatus({\n        message: \"Transaction failed.\",\n        type: \"fail\",\n      });\n    } else {\n      console.debug(\"Transaction successful, txHash: \", txHash);\n      setTransactionStatus({\n        message: \"Transaction succeeded.\",\n        type: \"success\",\n      });\n    }\n  };\n\n  const { totalSupply, decimals, name, symbol } = tokenDetails;\n  console.debug(\"Total supply:\", totalSupply);\n  console.debug(\"decimals:\", decimals);\n  const supply = parseInt(totalSupply) / 10 ** parseInt(decimals);\n\n  return (\n    <div className=\"container\">\n      <Header>\n        <HeaderItem>Account: {account}</HeaderItem>\n        <HeaderItem>Network: {network}</HeaderItem>\n      </Header>\n      <Section className={styles.section_contract}>\n        <h2 className={styles.title_outlined}>\n          <center>\n            {name} ({symbol})\n          </center>\n        </h2>\n        <p>\n          Total supply: {supply} {symbol}\n        </p>\n        <UserSection\n          account={account}\n          isOwner={isOwner}\n          tokenBalance={balances.account}\n          faucetBalance={balances.faucet}\n          onSendToFaucetClick={handleSendToFaucetClick}\n          onGetTokenClick={handleGetTokenClick}\n        ></UserSection>\n        <TransactionStatus\n          message={transactionStatus.message}\n          messageType={transactionStatus.type}\n        />\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2gbKz\",\"header_item\":\"Header_header_item__1bJIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"ContractSession_section__16P3h\",\"section_contract\":\"ContractSession_section_contract__1_7Ix\",\"section_contract_desc\":\"ContractSession_section_contract_desc__2q7J9\",\"section_contract_info\":\"ContractSession_section_contract_info__dF3_o\",\"title_outlined\":\"ContractSession_title_outlined__2kBHl\"};"],"sourceRoot":""}